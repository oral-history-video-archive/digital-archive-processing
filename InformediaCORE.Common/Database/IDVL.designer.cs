#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace InformediaCORE.Common.Database
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="DigitalArchiveSubset")]
	public partial class IDVLDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAnnotation(Annotation instance);
    partial void UpdateAnnotation(Annotation instance);
    partial void DeleteAnnotation(Annotation instance);
    partial void InsertWorld(World instance);
    partial void UpdateWorld(World instance);
    partial void DeleteWorld(World instance);
    partial void InsertAnnotationType(AnnotationType instance);
    partial void UpdateAnnotationType(AnnotationType instance);
    partial void DeleteAnnotationType(AnnotationType instance);
    partial void InsertMovie(Movie instance);
    partial void UpdateMovie(Movie instance);
    partial void DeleteMovie(Movie instance);
    partial void InsertPartitionMember(PartitionMember instance);
    partial void UpdatePartitionMember(PartitionMember instance);
    partial void DeletePartitionMember(PartitionMember instance);
    partial void InsertPartition(Partition instance);
    partial void UpdatePartition(Partition instance);
    partial void DeletePartition(Partition instance);
    partial void InsertSegment(Segment instance);
    partial void UpdateSegment(Segment instance);
    partial void DeleteSegment(Segment instance);
    partial void InsertSemaphore(Semaphore instance);
    partial void UpdateSemaphore(Semaphore instance);
    partial void DeleteSemaphore(Semaphore instance);
    partial void InsertTaskState(TaskState instance);
    partial void UpdateTaskState(TaskState instance);
    partial void DeleteTaskState(TaskState instance);
    partial void InsertCollection(Collection instance);
    partial void UpdateCollection(Collection instance);
    partial void DeleteCollection(Collection instance);
    partial void InsertSession(Session instance);
    partial void UpdateSession(Session instance);
    partial void DeleteSession(Session instance);
    partial void InsertQueuedUpdate(QueuedUpdate instance);
    partial void UpdateQueuedUpdate(QueuedUpdate instance);
    partial void DeleteQueuedUpdate(QueuedUpdate instance);
    partial void InsertNamedEntity(NamedEntity instance);
    partial void UpdateNamedEntity(NamedEntity instance);
    partial void DeleteNamedEntity(NamedEntity instance);
    partial void InsertTagImportStatus(TagImportStatus instance);
    partial void UpdateTagImportStatus(TagImportStatus instance);
    partial void DeleteTagImportStatus(TagImportStatus instance);
    #endregion
		
		public IDVLDataContext() : 
				base(global::InformediaCORE.Common.Properties.Settings.Default.DigitalArchiveSubsetConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public IDVLDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public IDVLDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public IDVLDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public IDVLDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Annotation> Annotations
		{
			get
			{
				return this.GetTable<Annotation>();
			}
		}
		
		public System.Data.Linq.Table<World> Worlds
		{
			get
			{
				return this.GetTable<World>();
			}
		}
		
		public System.Data.Linq.Table<AnnotationType> AnnotationTypes
		{
			get
			{
				return this.GetTable<AnnotationType>();
			}
		}
		
		public System.Data.Linq.Table<Movie> Movies
		{
			get
			{
				return this.GetTable<Movie>();
			}
		}
		
		public System.Data.Linq.Table<PartitionMember> PartitionMembers
		{
			get
			{
				return this.GetTable<PartitionMember>();
			}
		}
		
		public System.Data.Linq.Table<Partition> Partitions
		{
			get
			{
				return this.GetTable<Partition>();
			}
		}
		
		public System.Data.Linq.Table<Segment> Segments
		{
			get
			{
				return this.GetTable<Segment>();
			}
		}
		
		public System.Data.Linq.Table<Semaphore> Semaphores
		{
			get
			{
				return this.GetTable<Semaphore>();
			}
		}
		
		public System.Data.Linq.Table<TaskState> TaskStates
		{
			get
			{
				return this.GetTable<TaskState>();
			}
		}
		
		public System.Data.Linq.Table<Collection> Collections
		{
			get
			{
				return this.GetTable<Collection>();
			}
		}
		
		public System.Data.Linq.Table<Session> Sessions
		{
			get
			{
				return this.GetTable<Session>();
			}
		}
		
		public System.Data.Linq.Table<QueuedUpdate> QueuedUpdates
		{
			get
			{
				return this.GetTable<QueuedUpdate>();
			}
		}
		
		public System.Data.Linq.Table<NamedEntity> NamedEntities
		{
			get
			{
				return this.GetTable<NamedEntity>();
			}
		}
		
		public System.Data.Linq.Table<TagImportStatus> TagImportStatus
		{
			get
			{
				return this.GetTable<TagImportStatus>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="idvl.Annotations")]
	public partial class Annotation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AnnotationID;
		
		private System.Nullable<int> _CollectionID;
		
		private System.Nullable<int> _MovieID;
		
		private System.Nullable<int> _SegmentID;
		
		private int _TypeID;
		
		private string _Value;
		
		private EntityRef<AnnotationType> _AnnotationType;
		
		private EntityRef<Movie> _Movie;
		
		private EntityRef<Segment> _Segment;
		
		private EntityRef<Collection> _Collection;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAnnotationIDChanging(int value);
    partial void OnAnnotationIDChanged();
    partial void OnCollectionIDChanging(System.Nullable<int> value);
    partial void OnCollectionIDChanged();
    partial void OnMovieIDChanging(System.Nullable<int> value);
    partial void OnMovieIDChanged();
    partial void OnSegmentIDChanging(System.Nullable<int> value);
    partial void OnSegmentIDChanged();
    partial void OnTypeIDChanging(int value);
    partial void OnTypeIDChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public Annotation()
		{
			this._AnnotationType = default(EntityRef<AnnotationType>);
			this._Movie = default(EntityRef<Movie>);
			this._Segment = default(EntityRef<Segment>);
			this._Collection = default(EntityRef<Collection>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnnotationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AnnotationID
		{
			get
			{
				return this._AnnotationID;
			}
			set
			{
				if ((this._AnnotationID != value))
				{
					this.OnAnnotationIDChanging(value);
					this.SendPropertyChanging();
					this._AnnotationID = value;
					this.SendPropertyChanged("AnnotationID");
					this.OnAnnotationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CollectionID", DbType="Int")]
		public System.Nullable<int> CollectionID
		{
			get
			{
				return this._CollectionID;
			}
			set
			{
				if ((this._CollectionID != value))
				{
					if (this._Collection.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCollectionIDChanging(value);
					this.SendPropertyChanging();
					this._CollectionID = value;
					this.SendPropertyChanged("CollectionID");
					this.OnCollectionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MovieID", DbType="Int")]
		public System.Nullable<int> MovieID
		{
			get
			{
				return this._MovieID;
			}
			set
			{
				if ((this._MovieID != value))
				{
					if (this._Movie.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMovieIDChanging(value);
					this.SendPropertyChanging();
					this._MovieID = value;
					this.SendPropertyChanged("MovieID");
					this.OnMovieIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SegmentID", DbType="Int")]
		public System.Nullable<int> SegmentID
		{
			get
			{
				return this._SegmentID;
			}
			set
			{
				if ((this._SegmentID != value))
				{
					if (this._Segment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSegmentIDChanging(value);
					this.SendPropertyChanging();
					this._SegmentID = value;
					this.SendPropertyChanged("SegmentID");
					this.OnSegmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeID", DbType="Int NOT NULL")]
		public int TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					if (this._AnnotationType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="VarChar(1024)")]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AnnotationType_Annotation", Storage="_AnnotationType", ThisKey="TypeID", OtherKey="TypeID", IsForeignKey=true)]
		public AnnotationType AnnotationType
		{
			get
			{
				return this._AnnotationType.Entity;
			}
			set
			{
				AnnotationType previousValue = this._AnnotationType.Entity;
				if (((previousValue != value) 
							|| (this._AnnotationType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AnnotationType.Entity = null;
						previousValue.Annotations.Remove(this);
					}
					this._AnnotationType.Entity = value;
					if ((value != null))
					{
						value.Annotations.Add(this);
						this._TypeID = value.TypeID;
					}
					else
					{
						this._TypeID = default(int);
					}
					this.SendPropertyChanged("AnnotationType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Movie_Annotation", Storage="_Movie", ThisKey="MovieID", OtherKey="MovieID", IsForeignKey=true)]
		public Movie Movie
		{
			get
			{
				return this._Movie.Entity;
			}
			set
			{
				Movie previousValue = this._Movie.Entity;
				if (((previousValue != value) 
							|| (this._Movie.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Movie.Entity = null;
						previousValue.Annotations.Remove(this);
					}
					this._Movie.Entity = value;
					if ((value != null))
					{
						value.Annotations.Add(this);
						this._MovieID = value.MovieID;
					}
					else
					{
						this._MovieID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Movie");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Segment_Annotation", Storage="_Segment", ThisKey="SegmentID", OtherKey="SegmentID", IsForeignKey=true)]
		public Segment Segment
		{
			get
			{
				return this._Segment.Entity;
			}
			set
			{
				Segment previousValue = this._Segment.Entity;
				if (((previousValue != value) 
							|| (this._Segment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Segment.Entity = null;
						previousValue.Annotations.Remove(this);
					}
					this._Segment.Entity = value;
					if ((value != null))
					{
						value.Annotations.Add(this);
						this._SegmentID = value.SegmentID;
					}
					else
					{
						this._SegmentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Segment");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Collection_Annotation", Storage="_Collection", ThisKey="CollectionID", OtherKey="CollectionID", IsForeignKey=true)]
		public Collection Collection
		{
			get
			{
				return this._Collection.Entity;
			}
			set
			{
				Collection previousValue = this._Collection.Entity;
				if (((previousValue != value) 
							|| (this._Collection.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Collection.Entity = null;
						previousValue.Annotations.Remove(this);
					}
					this._Collection.Entity = value;
					if ((value != null))
					{
						value.Annotations.Add(this);
						this._CollectionID = value.CollectionID;
					}
					else
					{
						this._CollectionID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Collection");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="idvl.Worlds")]
	public partial class World : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _WorldID;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<Partition> _Partitions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWorldIDChanging(int value);
    partial void OnWorldIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public World()
		{
			this._Partitions = new EntitySet<Partition>(new Action<Partition>(this.attach_Partitions), new Action<Partition>(this.detach_Partitions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorldID", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int WorldID
		{
			get
			{
				return this._WorldID;
			}
			set
			{
				if ((this._WorldID != value))
				{
					this.OnWorldIDChanging(value);
					this.SendPropertyChanging();
					this._WorldID = value;
					this.SendPropertyChanged("WorldID");
					this.OnWorldIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(64) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(128)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="World_Partition", Storage="_Partitions", ThisKey="WorldID", OtherKey="WorldID")]
		public EntitySet<Partition> Partitions
		{
			get
			{
				return this._Partitions;
			}
			set
			{
				this._Partitions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Partitions(Partition entity)
		{
			this.SendPropertyChanging();
			entity.World = this;
		}
		
		private void detach_Partitions(Partition entity)
		{
			this.SendPropertyChanging();
			entity.World = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="idvl.AnnotationTypes")]
	public partial class AnnotationType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TypeID;
		
		private string _Name;
		
		private char _Scope;
		
		private string _Description;
		
		private EntitySet<Annotation> _Annotations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTypeIDChanging(int value);
    partial void OnTypeIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnScopeChanging(char value);
    partial void OnScopeChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public AnnotationType()
		{
			this._Annotations = new EntitySet<Annotation>(new Action<Annotation>(this.attach_Annotations), new Action<Annotation>(this.detach_Annotations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeID", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(32) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Scope", DbType="Char(1) NOT NULL")]
		public char Scope
		{
			get
			{
				return this._Scope;
			}
			set
			{
				if ((this._Scope != value))
				{
					this.OnScopeChanging(value);
					this.SendPropertyChanging();
					this._Scope = value;
					this.SendPropertyChanged("Scope");
					this.OnScopeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(128) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AnnotationType_Annotation", Storage="_Annotations", ThisKey="TypeID", OtherKey="TypeID")]
		public EntitySet<Annotation> Annotations
		{
			get
			{
				return this._Annotations;
			}
			set
			{
				this._Annotations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Annotations(Annotation entity)
		{
			this.SendPropertyChanging();
			entity.AnnotationType = this;
		}
		
		private void detach_Annotations(Annotation entity)
		{
			this.SendPropertyChanging();
			entity.AnnotationType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="idvl.Movies")]
	public partial class Movie : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MovieID;
		
		private string _MovieName;
		
		private int _CollectionID;
		
		private int _SessionID;
		
		private string _Abstract;
		
		private int _Tape;
		
		private string _MediaPath;
		
		private string _FileType;
		
		private int _Duration;
		
		private int _Width;
		
		private int _Height;
		
		private double _FPS;
		
		private System.Nullable<System.DateTime> _Created;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private EntitySet<Annotation> _Annotations;
		
		private EntitySet<Segment> _Segments;
		
		private EntityRef<Collection> _Collection;
		
		private EntityRef<Session> _Session;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMovieIDChanging(int value);
    partial void OnMovieIDChanged();
    partial void OnMovieNameChanging(string value);
    partial void OnMovieNameChanged();
    partial void OnCollectionIDChanging(int value);
    partial void OnCollectionIDChanged();
    partial void OnSessionIDChanging(int value);
    partial void OnSessionIDChanged();
    partial void OnAbstractChanging(string value);
    partial void OnAbstractChanged();
    partial void OnTapeChanging(int value);
    partial void OnTapeChanged();
    partial void OnMediaPathChanging(string value);
    partial void OnMediaPathChanged();
    partial void OnFileTypeChanging(string value);
    partial void OnFileTypeChanged();
    partial void OnDurationChanging(int value);
    partial void OnDurationChanged();
    partial void OnWidthChanging(int value);
    partial void OnWidthChanged();
    partial void OnHeightChanging(int value);
    partial void OnHeightChanged();
    partial void OnFPSChanging(double value);
    partial void OnFPSChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    #endregion
		
		public Movie()
		{
			this._Annotations = new EntitySet<Annotation>(new Action<Annotation>(this.attach_Annotations), new Action<Annotation>(this.detach_Annotations));
			this._Segments = new EntitySet<Segment>(new Action<Segment>(this.attach_Segments), new Action<Segment>(this.detach_Segments));
			this._Collection = default(EntityRef<Collection>);
			this._Session = default(EntityRef<Session>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MovieID", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int MovieID
		{
			get
			{
				return this._MovieID;
			}
			set
			{
				if ((this._MovieID != value))
				{
					this.OnMovieIDChanging(value);
					this.SendPropertyChanging();
					this._MovieID = value;
					this.SendPropertyChanged("MovieID");
					this.OnMovieIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MovieName", DbType="VarChar(64) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MovieName
		{
			get
			{
				return this._MovieName;
			}
			set
			{
				if ((this._MovieName != value))
				{
					this.OnMovieNameChanging(value);
					this.SendPropertyChanging();
					this._MovieName = value;
					this.SendPropertyChanged("MovieName");
					this.OnMovieNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CollectionID", DbType="Int NOT NULL")]
		public int CollectionID
		{
			get
			{
				return this._CollectionID;
			}
			set
			{
				if ((this._CollectionID != value))
				{
					if (this._Collection.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCollectionIDChanging(value);
					this.SendPropertyChanging();
					this._CollectionID = value;
					this.SendPropertyChanged("CollectionID");
					this.OnCollectionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionID", DbType="Int NOT NULL")]
		public int SessionID
		{
			get
			{
				return this._SessionID;
			}
			set
			{
				if ((this._SessionID != value))
				{
					if (this._Session.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSessionIDChanging(value);
					this.SendPropertyChanging();
					this._SessionID = value;
					this.SendPropertyChanged("SessionID");
					this.OnSessionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Abstract", DbType="VarChar(1024) NOT NULL", CanBeNull=false)]
		public string Abstract
		{
			get
			{
				return this._Abstract;
			}
			set
			{
				if ((this._Abstract != value))
				{
					this.OnAbstractChanging(value);
					this.SendPropertyChanging();
					this._Abstract = value;
					this.SendPropertyChanged("Abstract");
					this.OnAbstractChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Tape]", Storage="_Tape", DbType="Int NOT NULL")]
		public int Tape
		{
			get
			{
				return this._Tape;
			}
			set
			{
				if ((this._Tape != value))
				{
					this.OnTapeChanging(value);
					this.SendPropertyChanging();
					this._Tape = value;
					this.SendPropertyChanged("Tape");
					this.OnTapeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MediaPath", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string MediaPath
		{
			get
			{
				return this._MediaPath;
			}
			set
			{
				if ((this._MediaPath != value))
				{
					this.OnMediaPathChanging(value);
					this.SendPropertyChanging();
					this._MediaPath = value;
					this.SendPropertyChanged("MediaPath");
					this.OnMediaPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileType", DbType="VarChar(16) NOT NULL", CanBeNull=false)]
		public string FileType
		{
			get
			{
				return this._FileType;
			}
			set
			{
				if ((this._FileType != value))
				{
					this.OnFileTypeChanging(value);
					this.SendPropertyChanging();
					this._FileType = value;
					this.SendPropertyChanged("FileType");
					this.OnFileTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Duration", DbType="Int NOT NULL")]
		public int Duration
		{
			get
			{
				return this._Duration;
			}
			set
			{
				if ((this._Duration != value))
				{
					this.OnDurationChanging(value);
					this.SendPropertyChanging();
					this._Duration = value;
					this.SendPropertyChanged("Duration");
					this.OnDurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Width", DbType="Int NOT NULL")]
		public int Width
		{
			get
			{
				return this._Width;
			}
			set
			{
				if ((this._Width != value))
				{
					this.OnWidthChanging(value);
					this.SendPropertyChanging();
					this._Width = value;
					this.SendPropertyChanged("Width");
					this.OnWidthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Height", DbType="Int NOT NULL")]
		public int Height
		{
			get
			{
				return this._Height;
			}
			set
			{
				if ((this._Height != value))
				{
					this.OnHeightChanging(value);
					this.SendPropertyChanging();
					this._Height = value;
					this.SendPropertyChanged("Height");
					this.OnHeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FPS", DbType="Float NOT NULL")]
		public double FPS
		{
			get
			{
				return this._FPS;
			}
			set
			{
				if ((this._FPS != value))
				{
					this.OnFPSChanging(value);
					this.SendPropertyChanging();
					this._FPS = value;
					this.SendPropertyChanged("FPS");
					this.OnFPSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime2")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Modified", DbType="DateTime2")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Movie_Annotation", Storage="_Annotations", ThisKey="MovieID", OtherKey="MovieID")]
		public EntitySet<Annotation> Annotations
		{
			get
			{
				return this._Annotations;
			}
			set
			{
				this._Annotations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Movie_Segment", Storage="_Segments", ThisKey="MovieID", OtherKey="MovieID")]
		public EntitySet<Segment> Segments
		{
			get
			{
				return this._Segments;
			}
			set
			{
				this._Segments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Collection_Movie", Storage="_Collection", ThisKey="CollectionID", OtherKey="CollectionID", IsForeignKey=true)]
		public Collection Collection
		{
			get
			{
				return this._Collection.Entity;
			}
			set
			{
				Collection previousValue = this._Collection.Entity;
				if (((previousValue != value) 
							|| (this._Collection.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Collection.Entity = null;
						previousValue.Movies.Remove(this);
					}
					this._Collection.Entity = value;
					if ((value != null))
					{
						value.Movies.Add(this);
						this._CollectionID = value.CollectionID;
					}
					else
					{
						this._CollectionID = default(int);
					}
					this.SendPropertyChanged("Collection");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Session_Movie", Storage="_Session", ThisKey="SessionID", OtherKey="SessionID", IsForeignKey=true)]
		public Session Session
		{
			get
			{
				return this._Session.Entity;
			}
			set
			{
				Session previousValue = this._Session.Entity;
				if (((previousValue != value) 
							|| (this._Session.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Session.Entity = null;
						previousValue.Movies.Remove(this);
					}
					this._Session.Entity = value;
					if ((value != null))
					{
						value.Movies.Add(this);
						this._SessionID = value.SessionID;
					}
					else
					{
						this._SessionID = default(int);
					}
					this.SendPropertyChanged("Session");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Annotations(Annotation entity)
		{
			this.SendPropertyChanging();
			entity.Movie = this;
		}
		
		private void detach_Annotations(Annotation entity)
		{
			this.SendPropertyChanging();
			entity.Movie = null;
		}
		
		private void attach_Segments(Segment entity)
		{
			this.SendPropertyChanging();
			entity.Movie = this;
		}
		
		private void detach_Segments(Segment entity)
		{
			this.SendPropertyChanging();
			entity.Movie = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="idvl.PartitionMembers")]
	public partial class PartitionMember : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CollectionID;
		
		private int _PartitionID;
		
		private EntityRef<Partition> _Partition;
		
		private EntityRef<Collection> _Collection;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCollectionIDChanging(int value);
    partial void OnCollectionIDChanged();
    partial void OnPartitionIDChanging(int value);
    partial void OnPartitionIDChanged();
    #endregion
		
		public PartitionMember()
		{
			this._Partition = default(EntityRef<Partition>);
			this._Collection = default(EntityRef<Collection>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CollectionID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CollectionID
		{
			get
			{
				return this._CollectionID;
			}
			set
			{
				if ((this._CollectionID != value))
				{
					if (this._Collection.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCollectionIDChanging(value);
					this.SendPropertyChanging();
					this._CollectionID = value;
					this.SendPropertyChanged("CollectionID");
					this.OnCollectionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PartitionID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PartitionID
		{
			get
			{
				return this._PartitionID;
			}
			set
			{
				if ((this._PartitionID != value))
				{
					if (this._Partition.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPartitionIDChanging(value);
					this.SendPropertyChanging();
					this._PartitionID = value;
					this.SendPropertyChanged("PartitionID");
					this.OnPartitionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Partition_PartitionMember", Storage="_Partition", ThisKey="PartitionID", OtherKey="PartitionID", IsForeignKey=true)]
		public Partition Partition
		{
			get
			{
				return this._Partition.Entity;
			}
			set
			{
				Partition previousValue = this._Partition.Entity;
				if (((previousValue != value) 
							|| (this._Partition.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Partition.Entity = null;
						previousValue.PartitionMembers.Remove(this);
					}
					this._Partition.Entity = value;
					if ((value != null))
					{
						value.PartitionMembers.Add(this);
						this._PartitionID = value.PartitionID;
					}
					else
					{
						this._PartitionID = default(int);
					}
					this.SendPropertyChanged("Partition");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Collection_PartitionMember", Storage="_Collection", ThisKey="CollectionID", OtherKey="CollectionID", IsForeignKey=true)]
		public Collection Collection
		{
			get
			{
				return this._Collection.Entity;
			}
			set
			{
				Collection previousValue = this._Collection.Entity;
				if (((previousValue != value) 
							|| (this._Collection.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Collection.Entity = null;
						previousValue.PartitionMembers.Remove(this);
					}
					this._Collection.Entity = value;
					if ((value != null))
					{
						value.PartitionMembers.Add(this);
						this._CollectionID = value.CollectionID;
					}
					else
					{
						this._CollectionID = default(int);
					}
					this.SendPropertyChanged("Collection");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="idvl.Partitions")]
	public partial class Partition : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PartitionID;
		
		private int _WorldID;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<PartitionMember> _PartitionMembers;
		
		private EntityRef<World> _World;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPartitionIDChanging(int value);
    partial void OnPartitionIDChanged();
    partial void OnWorldIDChanging(int value);
    partial void OnWorldIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Partition()
		{
			this._PartitionMembers = new EntitySet<PartitionMember>(new Action<PartitionMember>(this.attach_PartitionMembers), new Action<PartitionMember>(this.detach_PartitionMembers));
			this._World = default(EntityRef<World>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PartitionID", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int PartitionID
		{
			get
			{
				return this._PartitionID;
			}
			set
			{
				if ((this._PartitionID != value))
				{
					this.OnPartitionIDChanging(value);
					this.SendPropertyChanging();
					this._PartitionID = value;
					this.SendPropertyChanged("PartitionID");
					this.OnPartitionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorldID", DbType="Int NOT NULL")]
		public int WorldID
		{
			get
			{
				return this._WorldID;
			}
			set
			{
				if ((this._WorldID != value))
				{
					if (this._World.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWorldIDChanging(value);
					this.SendPropertyChanging();
					this._WorldID = value;
					this.SendPropertyChanged("WorldID");
					this.OnWorldIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(64) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(128)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Partition_PartitionMember", Storage="_PartitionMembers", ThisKey="PartitionID", OtherKey="PartitionID")]
		public EntitySet<PartitionMember> PartitionMembers
		{
			get
			{
				return this._PartitionMembers;
			}
			set
			{
				this._PartitionMembers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="World_Partition", Storage="_World", ThisKey="WorldID", OtherKey="WorldID", IsForeignKey=true)]
		public World World
		{
			get
			{
				return this._World.Entity;
			}
			set
			{
				World previousValue = this._World.Entity;
				if (((previousValue != value) 
							|| (this._World.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._World.Entity = null;
						previousValue.Partitions.Remove(this);
					}
					this._World.Entity = value;
					if ((value != null))
					{
						value.Partitions.Add(this);
						this._WorldID = value.WorldID;
					}
					else
					{
						this._WorldID = default(int);
					}
					this.SendPropertyChanged("World");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PartitionMembers(PartitionMember entity)
		{
			this.SendPropertyChanging();
			entity.Partition = this;
		}
		
		private void detach_PartitionMembers(PartitionMember entity)
		{
			this.SendPropertyChanging();
			entity.Partition = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="idvl.Segments")]
	public partial class Segment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SegmentID;
		
		private string _SegmentName;
		
		private int _CollectionID;
		
		private int _SessionID;
		
		private int _MovieID;
		
		private string _Title;
		
		private string _Abstract;
		
		private int _StartTime;
		
		private int _EndTime;
		
		private string _MediaPath;
		
		private System.Nullable<int> _Duration;
		
		private System.Nullable<int> _Width;
		
		private System.Nullable<int> _Height;
		
		private System.Nullable<double> _FPS;
		
		private string _URL;
		
		private System.Nullable<int> _SegmentOrder;
		
		private System.Nullable<int> _NextSegmentID;
		
		private System.Nullable<int> _PrevSegmentID;
		
		private System.Nullable<int> _TranscriptLength;
		
		private string _TranscriptText;
		
		private System.Data.Linq.Binary _TranscriptSync;
		
		private System.Data.Linq.Binary _Keyframe;
		
		private System.Nullable<System.DateTime> _Created;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private char _Ready;
		
		private EntitySet<Annotation> _Annotations;
		
		private EntityRef<Semaphore> _Semaphore;
		
		private EntitySet<TaskState> _TaskStates;
		
		private EntitySet<NamedEntity> _NamedEntities;
		
		private EntityRef<TagImportStatus> _TagImportStatus;
		
		private EntityRef<Movie> _Movie;
		
		private EntityRef<Collection> _Collection;
		
		private EntityRef<Session> _Session;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSegmentIDChanging(int value);
    partial void OnSegmentIDChanged();
    partial void OnSegmentNameChanging(string value);
    partial void OnSegmentNameChanged();
    partial void OnCollectionIDChanging(int value);
    partial void OnCollectionIDChanged();
    partial void OnSessionIDChanging(int value);
    partial void OnSessionIDChanged();
    partial void OnMovieIDChanging(int value);
    partial void OnMovieIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnAbstractChanging(string value);
    partial void OnAbstractChanged();
    partial void OnStartTimeChanging(int value);
    partial void OnStartTimeChanged();
    partial void OnEndTimeChanging(int value);
    partial void OnEndTimeChanged();
    partial void OnMediaPathChanging(string value);
    partial void OnMediaPathChanged();
    partial void OnDurationChanging(System.Nullable<int> value);
    partial void OnDurationChanged();
    partial void OnWidthChanging(System.Nullable<int> value);
    partial void OnWidthChanged();
    partial void OnHeightChanging(System.Nullable<int> value);
    partial void OnHeightChanged();
    partial void OnFPSChanging(System.Nullable<double> value);
    partial void OnFPSChanged();
    partial void OnURLChanging(string value);
    partial void OnURLChanged();
    partial void OnSegmentOrderChanging(System.Nullable<int> value);
    partial void OnSegmentOrderChanged();
    partial void OnNextSegmentIDChanging(System.Nullable<int> value);
    partial void OnNextSegmentIDChanged();
    partial void OnPrevSegmentIDChanging(System.Nullable<int> value);
    partial void OnPrevSegmentIDChanged();
    partial void OnTranscriptLengthChanging(System.Nullable<int> value);
    partial void OnTranscriptLengthChanged();
    partial void OnTranscriptTextChanging(string value);
    partial void OnTranscriptTextChanged();
    partial void OnTranscriptSyncChanging(System.Data.Linq.Binary value);
    partial void OnTranscriptSyncChanged();
    partial void OnKeyframeChanging(System.Data.Linq.Binary value);
    partial void OnKeyframeChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnReadyChanging(char value);
    partial void OnReadyChanged();
    #endregion
		
		public Segment()
		{
			this._Annotations = new EntitySet<Annotation>(new Action<Annotation>(this.attach_Annotations), new Action<Annotation>(this.detach_Annotations));
			this._Semaphore = default(EntityRef<Semaphore>);
			this._TaskStates = new EntitySet<TaskState>(new Action<TaskState>(this.attach_TaskStates), new Action<TaskState>(this.detach_TaskStates));
			this._NamedEntities = new EntitySet<NamedEntity>(new Action<NamedEntity>(this.attach_NamedEntities), new Action<NamedEntity>(this.detach_NamedEntities));
			this._TagImportStatus = default(EntityRef<TagImportStatus>);
			this._Movie = default(EntityRef<Movie>);
			this._Collection = default(EntityRef<Collection>);
			this._Session = default(EntityRef<Session>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SegmentID", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int SegmentID
		{
			get
			{
				return this._SegmentID;
			}
			set
			{
				if ((this._SegmentID != value))
				{
					this.OnSegmentIDChanging(value);
					this.SendPropertyChanging();
					this._SegmentID = value;
					this.SendPropertyChanged("SegmentID");
					this.OnSegmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SegmentName", DbType="VarChar(80) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SegmentName
		{
			get
			{
				return this._SegmentName;
			}
			set
			{
				if ((this._SegmentName != value))
				{
					this.OnSegmentNameChanging(value);
					this.SendPropertyChanging();
					this._SegmentName = value;
					this.SendPropertyChanged("SegmentName");
					this.OnSegmentNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CollectionID", DbType="Int NOT NULL")]
		public int CollectionID
		{
			get
			{
				return this._CollectionID;
			}
			set
			{
				if ((this._CollectionID != value))
				{
					if (this._Collection.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCollectionIDChanging(value);
					this.SendPropertyChanging();
					this._CollectionID = value;
					this.SendPropertyChanged("CollectionID");
					this.OnCollectionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionID", DbType="Int NOT NULL")]
		public int SessionID
		{
			get
			{
				return this._SessionID;
			}
			set
			{
				if ((this._SessionID != value))
				{
					if (this._Session.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSessionIDChanging(value);
					this.SendPropertyChanging();
					this._SessionID = value;
					this.SendPropertyChanged("SessionID");
					this.OnSessionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MovieID", DbType="Int NOT NULL")]
		public int MovieID
		{
			get
			{
				return this._MovieID;
			}
			set
			{
				if ((this._MovieID != value))
				{
					if (this._Movie.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMovieIDChanging(value);
					this.SendPropertyChanging();
					this._MovieID = value;
					this.SendPropertyChanged("MovieID");
					this.OnMovieIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(256) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Abstract", DbType="VarChar(1024) NOT NULL", CanBeNull=false)]
		public string Abstract
		{
			get
			{
				return this._Abstract;
			}
			set
			{
				if ((this._Abstract != value))
				{
					this.OnAbstractChanging(value);
					this.SendPropertyChanging();
					this._Abstract = value;
					this.SendPropertyChanged("Abstract");
					this.OnAbstractChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime", DbType="Int NOT NULL")]
		public int StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndTime", DbType="Int NOT NULL")]
		public int EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this.OnEndTimeChanging(value);
					this.SendPropertyChanging();
					this._EndTime = value;
					this.SendPropertyChanged("EndTime");
					this.OnEndTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MediaPath", DbType="VarChar(255)")]
		public string MediaPath
		{
			get
			{
				return this._MediaPath;
			}
			set
			{
				if ((this._MediaPath != value))
				{
					this.OnMediaPathChanging(value);
					this.SendPropertyChanging();
					this._MediaPath = value;
					this.SendPropertyChanged("MediaPath");
					this.OnMediaPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Duration", DbType="Int")]
		public System.Nullable<int> Duration
		{
			get
			{
				return this._Duration;
			}
			set
			{
				if ((this._Duration != value))
				{
					this.OnDurationChanging(value);
					this.SendPropertyChanging();
					this._Duration = value;
					this.SendPropertyChanged("Duration");
					this.OnDurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Width", DbType="Int")]
		public System.Nullable<int> Width
		{
			get
			{
				return this._Width;
			}
			set
			{
				if ((this._Width != value))
				{
					this.OnWidthChanging(value);
					this.SendPropertyChanging();
					this._Width = value;
					this.SendPropertyChanged("Width");
					this.OnWidthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Height", DbType="Int")]
		public System.Nullable<int> Height
		{
			get
			{
				return this._Height;
			}
			set
			{
				if ((this._Height != value))
				{
					this.OnHeightChanging(value);
					this.SendPropertyChanging();
					this._Height = value;
					this.SendPropertyChanged("Height");
					this.OnHeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FPS", DbType="Float")]
		public System.Nullable<double> FPS
		{
			get
			{
				return this._FPS;
			}
			set
			{
				if ((this._FPS != value))
				{
					this.OnFPSChanging(value);
					this.SendPropertyChanging();
					this._FPS = value;
					this.SendPropertyChanged("FPS");
					this.OnFPSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_URL", DbType="VarChar(255)")]
		public string URL
		{
			get
			{
				return this._URL;
			}
			set
			{
				if ((this._URL != value))
				{
					this.OnURLChanging(value);
					this.SendPropertyChanging();
					this._URL = value;
					this.SendPropertyChanged("URL");
					this.OnURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SegmentOrder", DbType="Int")]
		public System.Nullable<int> SegmentOrder
		{
			get
			{
				return this._SegmentOrder;
			}
			set
			{
				if ((this._SegmentOrder != value))
				{
					this.OnSegmentOrderChanging(value);
					this.SendPropertyChanging();
					this._SegmentOrder = value;
					this.SendPropertyChanged("SegmentOrder");
					this.OnSegmentOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NextSegmentID", DbType="Int")]
		public System.Nullable<int> NextSegmentID
		{
			get
			{
				return this._NextSegmentID;
			}
			set
			{
				if ((this._NextSegmentID != value))
				{
					this.OnNextSegmentIDChanging(value);
					this.SendPropertyChanging();
					this._NextSegmentID = value;
					this.SendPropertyChanged("NextSegmentID");
					this.OnNextSegmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrevSegmentID", DbType="Int")]
		public System.Nullable<int> PrevSegmentID
		{
			get
			{
				return this._PrevSegmentID;
			}
			set
			{
				if ((this._PrevSegmentID != value))
				{
					this.OnPrevSegmentIDChanging(value);
					this.SendPropertyChanging();
					this._PrevSegmentID = value;
					this.SendPropertyChanged("PrevSegmentID");
					this.OnPrevSegmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TranscriptLength", DbType="Int")]
		public System.Nullable<int> TranscriptLength
		{
			get
			{
				return this._TranscriptLength;
			}
			set
			{
				if ((this._TranscriptLength != value))
				{
					this.OnTranscriptLengthChanging(value);
					this.SendPropertyChanging();
					this._TranscriptLength = value;
					this.SendPropertyChanged("TranscriptLength");
					this.OnTranscriptLengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TranscriptText", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string TranscriptText
		{
			get
			{
				return this._TranscriptText;
			}
			set
			{
				if ((this._TranscriptText != value))
				{
					this.OnTranscriptTextChanging(value);
					this.SendPropertyChanging();
					this._TranscriptText = value;
					this.SendPropertyChanged("TranscriptText");
					this.OnTranscriptTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TranscriptSync", DbType="VarBinary(MAX)", CanBeNull=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TranscriptSync
		{
			get
			{
				return this._TranscriptSync;
			}
			set
			{
				if ((this._TranscriptSync != value))
				{
					this.OnTranscriptSyncChanging(value);
					this.SendPropertyChanging();
					this._TranscriptSync = value;
					this.SendPropertyChanged("TranscriptSync");
					this.OnTranscriptSyncChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Keyframe", DbType="VarBinary(MAX)", CanBeNull=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Keyframe
		{
			get
			{
				return this._Keyframe;
			}
			set
			{
				if ((this._Keyframe != value))
				{
					this.OnKeyframeChanging(value);
					this.SendPropertyChanging();
					this._Keyframe = value;
					this.SendPropertyChanged("Keyframe");
					this.OnKeyframeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime2")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Modified", DbType="DateTime2")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ready", DbType="Char(1) NOT NULL")]
		public char Ready
		{
			get
			{
				return this._Ready;
			}
			set
			{
				if ((this._Ready != value))
				{
					this.OnReadyChanging(value);
					this.SendPropertyChanging();
					this._Ready = value;
					this.SendPropertyChanged("Ready");
					this.OnReadyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Segment_Annotation", Storage="_Annotations", ThisKey="SegmentID", OtherKey="SegmentID")]
		public EntitySet<Annotation> Annotations
		{
			get
			{
				return this._Annotations;
			}
			set
			{
				this._Annotations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Segment_Semaphore", Storage="_Semaphore", ThisKey="SegmentID", OtherKey="SegmentID", IsUnique=true, IsForeignKey=false)]
		public Semaphore Semaphore
		{
			get
			{
				return this._Semaphore.Entity;
			}
			set
			{
				Semaphore previousValue = this._Semaphore.Entity;
				if (((previousValue != value) 
							|| (this._Semaphore.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Semaphore.Entity = null;
						previousValue.Segment = null;
					}
					this._Semaphore.Entity = value;
					if ((value != null))
					{
						value.Segment = this;
					}
					this.SendPropertyChanged("Semaphore");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Segment_TaskState", Storage="_TaskStates", ThisKey="SegmentID", OtherKey="SegmentID")]
		public EntitySet<TaskState> TaskStates
		{
			get
			{
				return this._TaskStates;
			}
			set
			{
				this._TaskStates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Segment_NamedEntity", Storage="_NamedEntities", ThisKey="SegmentID", OtherKey="SegmentID")]
		public EntitySet<NamedEntity> NamedEntities
		{
			get
			{
				return this._NamedEntities;
			}
			set
			{
				this._NamedEntities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Segment_TagImportStatus", Storage="_TagImportStatus", ThisKey="SegmentID", OtherKey="SegmentID", IsUnique=true, IsForeignKey=false)]
		public TagImportStatus TagImportStatus
		{
			get
			{
				return this._TagImportStatus.Entity;
			}
			set
			{
				TagImportStatus previousValue = this._TagImportStatus.Entity;
				if (((previousValue != value) 
							|| (this._TagImportStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TagImportStatus.Entity = null;
						previousValue.Segment = null;
					}
					this._TagImportStatus.Entity = value;
					if ((value != null))
					{
						value.Segment = this;
					}
					this.SendPropertyChanged("TagImportStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Movie_Segment", Storage="_Movie", ThisKey="MovieID", OtherKey="MovieID", IsForeignKey=true)]
		public Movie Movie
		{
			get
			{
				return this._Movie.Entity;
			}
			set
			{
				Movie previousValue = this._Movie.Entity;
				if (((previousValue != value) 
							|| (this._Movie.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Movie.Entity = null;
						previousValue.Segments.Remove(this);
					}
					this._Movie.Entity = value;
					if ((value != null))
					{
						value.Segments.Add(this);
						this._MovieID = value.MovieID;
					}
					else
					{
						this._MovieID = default(int);
					}
					this.SendPropertyChanged("Movie");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Collection_Segment", Storage="_Collection", ThisKey="CollectionID", OtherKey="CollectionID", IsForeignKey=true)]
		public Collection Collection
		{
			get
			{
				return this._Collection.Entity;
			}
			set
			{
				Collection previousValue = this._Collection.Entity;
				if (((previousValue != value) 
							|| (this._Collection.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Collection.Entity = null;
						previousValue.Segments.Remove(this);
					}
					this._Collection.Entity = value;
					if ((value != null))
					{
						value.Segments.Add(this);
						this._CollectionID = value.CollectionID;
					}
					else
					{
						this._CollectionID = default(int);
					}
					this.SendPropertyChanged("Collection");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Session_Segment", Storage="_Session", ThisKey="SessionID", OtherKey="SessionID", IsForeignKey=true)]
		public Session Session
		{
			get
			{
				return this._Session.Entity;
			}
			set
			{
				Session previousValue = this._Session.Entity;
				if (((previousValue != value) 
							|| (this._Session.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Session.Entity = null;
						previousValue.Segments.Remove(this);
					}
					this._Session.Entity = value;
					if ((value != null))
					{
						value.Segments.Add(this);
						this._SessionID = value.SessionID;
					}
					else
					{
						this._SessionID = default(int);
					}
					this.SendPropertyChanged("Session");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Annotations(Annotation entity)
		{
			this.SendPropertyChanging();
			entity.Segment = this;
		}
		
		private void detach_Annotations(Annotation entity)
		{
			this.SendPropertyChanging();
			entity.Segment = null;
		}
		
		private void attach_TaskStates(TaskState entity)
		{
			this.SendPropertyChanging();
			entity.Segment = this;
		}
		
		private void detach_TaskStates(TaskState entity)
		{
			this.SendPropertyChanging();
			entity.Segment = null;
		}
		
		private void attach_NamedEntities(NamedEntity entity)
		{
			this.SendPropertyChanging();
			entity.Segment = this;
		}
		
		private void detach_NamedEntities(NamedEntity entity)
		{
			this.SendPropertyChanging();
			entity.Segment = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="idvl.Semaphores")]
	public partial class Semaphore : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SegmentID;
		
		private int _PID;
		
		private string _Hostname;
		
		private System.Nullable<System.DateTime> _Created;
		
		private EntityRef<Segment> _Segment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSegmentIDChanging(int value);
    partial void OnSegmentIDChanged();
    partial void OnPIDChanging(int value);
    partial void OnPIDChanged();
    partial void OnHostnameChanging(string value);
    partial void OnHostnameChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    #endregion
		
		public Semaphore()
		{
			this._Segment = default(EntityRef<Segment>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SegmentID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SegmentID
		{
			get
			{
				return this._SegmentID;
			}
			set
			{
				if ((this._SegmentID != value))
				{
					if (this._Segment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSegmentIDChanging(value);
					this.SendPropertyChanging();
					this._SegmentID = value;
					this.SendPropertyChanged("SegmentID");
					this.OnSegmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PID", DbType="Int NOT NULL")]
		public int PID
		{
			get
			{
				return this._PID;
			}
			set
			{
				if ((this._PID != value))
				{
					this.OnPIDChanging(value);
					this.SendPropertyChanging();
					this._PID = value;
					this.SendPropertyChanged("PID");
					this.OnPIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hostname", DbType="VarChar(32) NOT NULL", CanBeNull=false)]
		public string Hostname
		{
			get
			{
				return this._Hostname;
			}
			set
			{
				if ((this._Hostname != value))
				{
					this.OnHostnameChanging(value);
					this.SendPropertyChanging();
					this._Hostname = value;
					this.SendPropertyChanged("Hostname");
					this.OnHostnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime2")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Segment_Semaphore", Storage="_Segment", ThisKey="SegmentID", OtherKey="SegmentID", IsForeignKey=true)]
		public Segment Segment
		{
			get
			{
				return this._Segment.Entity;
			}
			set
			{
				Segment previousValue = this._Segment.Entity;
				if (((previousValue != value) 
							|| (this._Segment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Segment.Entity = null;
						previousValue.Semaphore = null;
					}
					this._Segment.Entity = value;
					if ((value != null))
					{
						value.Semaphore = this;
						this._SegmentID = value.SegmentID;
					}
					else
					{
						this._SegmentID = default(int);
					}
					this.SendPropertyChanged("Segment");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="idvl.TaskStates")]
	public partial class TaskState : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SegmentID;
		
		private string _Name;
		
		private System.Nullable<char> _State;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private EntityRef<Segment> _Segment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSegmentIDChanging(int value);
    partial void OnSegmentIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnStateChanging(System.Nullable<char> value);
    partial void OnStateChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    #endregion
		
		public TaskState()
		{
			this._Segment = default(EntityRef<Segment>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SegmentID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SegmentID
		{
			get
			{
				return this._SegmentID;
			}
			set
			{
				if ((this._SegmentID != value))
				{
					if (this._Segment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSegmentIDChanging(value);
					this.SendPropertyChanging();
					this._SegmentID = value;
					this.SendPropertyChanged("SegmentID");
					this.OnSegmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(32) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="Char(1)")]
		public System.Nullable<char> State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Modified", DbType="DateTime2")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Segment_TaskState", Storage="_Segment", ThisKey="SegmentID", OtherKey="SegmentID", IsForeignKey=true)]
		public Segment Segment
		{
			get
			{
				return this._Segment.Entity;
			}
			set
			{
				Segment previousValue = this._Segment.Entity;
				if (((previousValue != value) 
							|| (this._Segment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Segment.Entity = null;
						previousValue.TaskStates.Remove(this);
					}
					this._Segment.Entity = value;
					if ((value != null))
					{
						value.TaskStates.Add(this);
						this._SegmentID = value.SegmentID;
					}
					else
					{
						this._SegmentID = default(int);
					}
					this.SendPropertyChanged("Segment");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="idvl.Collections")]
	public partial class Collection : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CollectionID;
		
		private string _Accession;
		
		private string _DescriptionShort;
		
		private string _BiographyShort;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _PreferredName;
		
		private char _Gender;
		
		private string _WebsiteURL;
		
		private string _Region;
		
		private string _BirthCity;
		
		private string _BirthState;
		
		private string _BirthCountry;
		
		private System.Nullable<System.DateTime> _BirthDate;
		
		private System.Nullable<System.DateTime> _DeceasedDate;
		
		private string _FileType;
		
		private System.Data.Linq.Binary _Portrait;
		
		private System.Nullable<System.DateTime> _Created;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private System.Nullable<System.DateTime> _Published;
		
		private char _Phase;
		
		private EntitySet<Annotation> _Annotations;
		
		private EntitySet<Movie> _Movies;
		
		private EntitySet<PartitionMember> _PartitionMembers;
		
		private EntitySet<Segment> _Segments;
		
		private EntitySet<Session> _Sessions;
		
		private EntityRef<QueuedUpdate> _QueuedUpdate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCollectionIDChanging(int value);
    partial void OnCollectionIDChanged();
    partial void OnAccessionChanging(string value);
    partial void OnAccessionChanged();
    partial void OnDescriptionShortChanging(string value);
    partial void OnDescriptionShortChanged();
    partial void OnBiographyShortChanging(string value);
    partial void OnBiographyShortChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnPreferredNameChanging(string value);
    partial void OnPreferredNameChanged();
    partial void OnGenderChanging(char value);
    partial void OnGenderChanged();
    partial void OnWebsiteURLChanging(string value);
    partial void OnWebsiteURLChanged();
    partial void OnRegionChanging(string value);
    partial void OnRegionChanged();
    partial void OnBirthCityChanging(string value);
    partial void OnBirthCityChanged();
    partial void OnBirthStateChanging(string value);
    partial void OnBirthStateChanged();
    partial void OnBirthCountryChanging(string value);
    partial void OnBirthCountryChanged();
    partial void OnBirthDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBirthDateChanged();
    partial void OnDeceasedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeceasedDateChanged();
    partial void OnFileTypeChanging(string value);
    partial void OnFileTypeChanged();
    partial void OnPortraitChanging(System.Data.Linq.Binary value);
    partial void OnPortraitChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnPublishedChanging(System.Nullable<System.DateTime> value);
    partial void OnPublishedChanged();
    partial void OnPhaseChanging(char value);
    partial void OnPhaseChanged();
    #endregion
		
		public Collection()
		{
			this._Annotations = new EntitySet<Annotation>(new Action<Annotation>(this.attach_Annotations), new Action<Annotation>(this.detach_Annotations));
			this._Movies = new EntitySet<Movie>(new Action<Movie>(this.attach_Movies), new Action<Movie>(this.detach_Movies));
			this._PartitionMembers = new EntitySet<PartitionMember>(new Action<PartitionMember>(this.attach_PartitionMembers), new Action<PartitionMember>(this.detach_PartitionMembers));
			this._Segments = new EntitySet<Segment>(new Action<Segment>(this.attach_Segments), new Action<Segment>(this.detach_Segments));
			this._Sessions = new EntitySet<Session>(new Action<Session>(this.attach_Sessions), new Action<Session>(this.detach_Sessions));
			this._QueuedUpdate = default(EntityRef<QueuedUpdate>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CollectionID", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int CollectionID
		{
			get
			{
				return this._CollectionID;
			}
			set
			{
				if ((this._CollectionID != value))
				{
					this.OnCollectionIDChanging(value);
					this.SendPropertyChanging();
					this._CollectionID = value;
					this.SendPropertyChanged("CollectionID");
					this.OnCollectionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Accession", DbType="VarChar(64) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Accession
		{
			get
			{
				return this._Accession;
			}
			set
			{
				if ((this._Accession != value))
				{
					this.OnAccessionChanging(value);
					this.SendPropertyChanging();
					this._Accession = value;
					this.SendPropertyChanged("Accession");
					this.OnAccessionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DescriptionShort", DbType="VarChar(1024) NOT NULL", CanBeNull=false)]
		public string DescriptionShort
		{
			get
			{
				return this._DescriptionShort;
			}
			set
			{
				if ((this._DescriptionShort != value))
				{
					this.OnDescriptionShortChanging(value);
					this.SendPropertyChanging();
					this._DescriptionShort = value;
					this.SendPropertyChanged("DescriptionShort");
					this.OnDescriptionShortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BiographyShort", DbType="VarChar(2028) NOT NULL", CanBeNull=false)]
		public string BiographyShort
		{
			get
			{
				return this._BiographyShort;
			}
			set
			{
				if ((this._BiographyShort != value))
				{
					this.OnBiographyShortChanging(value);
					this.SendPropertyChanging();
					this._BiographyShort = value;
					this.SendPropertyChanged("BiographyShort");
					this.OnBiographyShortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PreferredName", DbType="VarChar(128) NOT NULL", CanBeNull=false)]
		public string PreferredName
		{
			get
			{
				return this._PreferredName;
			}
			set
			{
				if ((this._PreferredName != value))
				{
					this.OnPreferredNameChanging(value);
					this.SendPropertyChanging();
					this._PreferredName = value;
					this.SendPropertyChanged("PreferredName");
					this.OnPreferredNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="Char(1) NOT NULL")]
		public char Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WebsiteURL", DbType="VarChar(128)")]
		public string WebsiteURL
		{
			get
			{
				return this._WebsiteURL;
			}
			set
			{
				if ((this._WebsiteURL != value))
				{
					this.OnWebsiteURLChanging(value);
					this.SendPropertyChanging();
					this._WebsiteURL = value;
					this.SendPropertyChanged("WebsiteURL");
					this.OnWebsiteURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Region", DbType="VarChar(64)")]
		public string Region
		{
			get
			{
				return this._Region;
			}
			set
			{
				if ((this._Region != value))
				{
					this.OnRegionChanging(value);
					this.SendPropertyChanging();
					this._Region = value;
					this.SendPropertyChanged("Region");
					this.OnRegionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BirthCity", DbType="VarChar(64)")]
		public string BirthCity
		{
			get
			{
				return this._BirthCity;
			}
			set
			{
				if ((this._BirthCity != value))
				{
					this.OnBirthCityChanging(value);
					this.SendPropertyChanging();
					this._BirthCity = value;
					this.SendPropertyChanged("BirthCity");
					this.OnBirthCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BirthState", DbType="VarChar(64)")]
		public string BirthState
		{
			get
			{
				return this._BirthState;
			}
			set
			{
				if ((this._BirthState != value))
				{
					this.OnBirthStateChanging(value);
					this.SendPropertyChanging();
					this._BirthState = value;
					this.SendPropertyChanged("BirthState");
					this.OnBirthStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BirthCountry", DbType="VarChar(64)")]
		public string BirthCountry
		{
			get
			{
				return this._BirthCountry;
			}
			set
			{
				if ((this._BirthCountry != value))
				{
					this.OnBirthCountryChanging(value);
					this.SendPropertyChanging();
					this._BirthCountry = value;
					this.SendPropertyChanged("BirthCountry");
					this.OnBirthCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BirthDate", DbType="Date")]
		public System.Nullable<System.DateTime> BirthDate
		{
			get
			{
				return this._BirthDate;
			}
			set
			{
				if ((this._BirthDate != value))
				{
					this.OnBirthDateChanging(value);
					this.SendPropertyChanging();
					this._BirthDate = value;
					this.SendPropertyChanged("BirthDate");
					this.OnBirthDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeceasedDate", DbType="Date")]
		public System.Nullable<System.DateTime> DeceasedDate
		{
			get
			{
				return this._DeceasedDate;
			}
			set
			{
				if ((this._DeceasedDate != value))
				{
					this.OnDeceasedDateChanging(value);
					this.SendPropertyChanging();
					this._DeceasedDate = value;
					this.SendPropertyChanged("DeceasedDate");
					this.OnDeceasedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileType", DbType="Char(3)")]
		public string FileType
		{
			get
			{
				return this._FileType;
			}
			set
			{
				if ((this._FileType != value))
				{
					this.OnFileTypeChanging(value);
					this.SendPropertyChanging();
					this._FileType = value;
					this.SendPropertyChanged("FileType");
					this.OnFileTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Portrait", DbType="VarBinary(MAX)", CanBeNull=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Portrait
		{
			get
			{
				return this._Portrait;
			}
			set
			{
				if ((this._Portrait != value))
				{
					this.OnPortraitChanging(value);
					this.SendPropertyChanging();
					this._Portrait = value;
					this.SendPropertyChanged("Portrait");
					this.OnPortraitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime2")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Modified", DbType="DateTime2")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Published", DbType="DateTime2")]
		public System.Nullable<System.DateTime> Published
		{
			get
			{
				return this._Published;
			}
			set
			{
				if ((this._Published != value))
				{
					this.OnPublishedChanging(value);
					this.SendPropertyChanging();
					this._Published = value;
					this.SendPropertyChanged("Published");
					this.OnPublishedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phase", DbType="Char(1) NOT NULL")]
		public char Phase
		{
			get
			{
				return this._Phase;
			}
			set
			{
				if ((this._Phase != value))
				{
					this.OnPhaseChanging(value);
					this.SendPropertyChanging();
					this._Phase = value;
					this.SendPropertyChanged("Phase");
					this.OnPhaseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Collection_Annotation", Storage="_Annotations", ThisKey="CollectionID", OtherKey="CollectionID")]
		public EntitySet<Annotation> Annotations
		{
			get
			{
				return this._Annotations;
			}
			set
			{
				this._Annotations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Collection_Movie", Storage="_Movies", ThisKey="CollectionID", OtherKey="CollectionID")]
		public EntitySet<Movie> Movies
		{
			get
			{
				return this._Movies;
			}
			set
			{
				this._Movies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Collection_PartitionMember", Storage="_PartitionMembers", ThisKey="CollectionID", OtherKey="CollectionID")]
		public EntitySet<PartitionMember> PartitionMembers
		{
			get
			{
				return this._PartitionMembers;
			}
			set
			{
				this._PartitionMembers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Collection_Segment", Storage="_Segments", ThisKey="CollectionID", OtherKey="CollectionID")]
		public EntitySet<Segment> Segments
		{
			get
			{
				return this._Segments;
			}
			set
			{
				this._Segments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Collection_Session", Storage="_Sessions", ThisKey="CollectionID", OtherKey="CollectionID")]
		public EntitySet<Session> Sessions
		{
			get
			{
				return this._Sessions;
			}
			set
			{
				this._Sessions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Collection_QueuedUpdate", Storage="_QueuedUpdate", ThisKey="Accession", OtherKey="Accession", IsUnique=true, IsForeignKey=false)]
		public QueuedUpdate QueuedUpdate
		{
			get
			{
				return this._QueuedUpdate.Entity;
			}
			set
			{
				QueuedUpdate previousValue = this._QueuedUpdate.Entity;
				if (((previousValue != value) 
							|| (this._QueuedUpdate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._QueuedUpdate.Entity = null;
						previousValue.Collection = null;
					}
					this._QueuedUpdate.Entity = value;
					if ((value != null))
					{
						value.Collection = this;
					}
					this.SendPropertyChanged("QueuedUpdate");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Annotations(Annotation entity)
		{
			this.SendPropertyChanging();
			entity.Collection = this;
		}
		
		private void detach_Annotations(Annotation entity)
		{
			this.SendPropertyChanging();
			entity.Collection = null;
		}
		
		private void attach_Movies(Movie entity)
		{
			this.SendPropertyChanging();
			entity.Collection = this;
		}
		
		private void detach_Movies(Movie entity)
		{
			this.SendPropertyChanging();
			entity.Collection = null;
		}
		
		private void attach_PartitionMembers(PartitionMember entity)
		{
			this.SendPropertyChanging();
			entity.Collection = this;
		}
		
		private void detach_PartitionMembers(PartitionMember entity)
		{
			this.SendPropertyChanging();
			entity.Collection = null;
		}
		
		private void attach_Segments(Segment entity)
		{
			this.SendPropertyChanging();
			entity.Collection = this;
		}
		
		private void detach_Segments(Segment entity)
		{
			this.SendPropertyChanging();
			entity.Collection = null;
		}
		
		private void attach_Sessions(Session entity)
		{
			this.SendPropertyChanging();
			entity.Collection = this;
		}
		
		private void detach_Sessions(Session entity)
		{
			this.SendPropertyChanging();
			entity.Collection = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="idvl.Sessions")]
	public partial class Session : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SessionID;
		
		private int _CollectionID;
		
		private int _SessionOrder;
		
		private string _Interviewer;
		
		private System.DateTime _InterviewDate;
		
		private string _Location;
		
		private string _Videographer;
		
		private string _Sponsor;
		
		private string _SponsorURL;
		
		private System.Data.Linq.Binary _SponsorImage;
		
		private string _ImageType;
		
		private System.Nullable<System.DateTime> _Created;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private System.Nullable<System.DateTime> _Published;
		
		private char _Phase;
		
		private EntitySet<Movie> _Movies;
		
		private EntitySet<Segment> _Segments;
		
		private EntityRef<Collection> _Collection;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSessionIDChanging(int value);
    partial void OnSessionIDChanged();
    partial void OnCollectionIDChanging(int value);
    partial void OnCollectionIDChanged();
    partial void OnSessionOrderChanging(int value);
    partial void OnSessionOrderChanged();
    partial void OnInterviewerChanging(string value);
    partial void OnInterviewerChanged();
    partial void OnInterviewDateChanging(System.DateTime value);
    partial void OnInterviewDateChanged();
    partial void OnLocationChanging(string value);
    partial void OnLocationChanged();
    partial void OnVideographerChanging(string value);
    partial void OnVideographerChanged();
    partial void OnSponsorChanging(string value);
    partial void OnSponsorChanged();
    partial void OnSponsorURLChanging(string value);
    partial void OnSponsorURLChanged();
    partial void OnSponsorImageChanging(System.Data.Linq.Binary value);
    partial void OnSponsorImageChanged();
    partial void OnImageTypeChanging(string value);
    partial void OnImageTypeChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnPublishedChanging(System.Nullable<System.DateTime> value);
    partial void OnPublishedChanged();
    partial void OnPhaseChanging(char value);
    partial void OnPhaseChanged();
    #endregion
		
		public Session()
		{
			this._Movies = new EntitySet<Movie>(new Action<Movie>(this.attach_Movies), new Action<Movie>(this.detach_Movies));
			this._Segments = new EntitySet<Segment>(new Action<Segment>(this.attach_Segments), new Action<Segment>(this.detach_Segments));
			this._Collection = default(EntityRef<Collection>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionID", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int SessionID
		{
			get
			{
				return this._SessionID;
			}
			set
			{
				if ((this._SessionID != value))
				{
					this.OnSessionIDChanging(value);
					this.SendPropertyChanging();
					this._SessionID = value;
					this.SendPropertyChanged("SessionID");
					this.OnSessionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CollectionID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CollectionID
		{
			get
			{
				return this._CollectionID;
			}
			set
			{
				if ((this._CollectionID != value))
				{
					if (this._Collection.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCollectionIDChanging(value);
					this.SendPropertyChanging();
					this._CollectionID = value;
					this.SendPropertyChanged("CollectionID");
					this.OnCollectionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionOrder", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SessionOrder
		{
			get
			{
				return this._SessionOrder;
			}
			set
			{
				if ((this._SessionOrder != value))
				{
					this.OnSessionOrderChanging(value);
					this.SendPropertyChanging();
					this._SessionOrder = value;
					this.SendPropertyChanged("SessionOrder");
					this.OnSessionOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Interviewer", DbType="VarChar(128) NOT NULL", CanBeNull=false)]
		public string Interviewer
		{
			get
			{
				return this._Interviewer;
			}
			set
			{
				if ((this._Interviewer != value))
				{
					this.OnInterviewerChanging(value);
					this.SendPropertyChanging();
					this._Interviewer = value;
					this.SendPropertyChanged("Interviewer");
					this.OnInterviewerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InterviewDate", DbType="Date NOT NULL")]
		public System.DateTime InterviewDate
		{
			get
			{
				return this._InterviewDate;
			}
			set
			{
				if ((this._InterviewDate != value))
				{
					this.OnInterviewDateChanging(value);
					this.SendPropertyChanging();
					this._InterviewDate = value;
					this.SendPropertyChanged("InterviewDate");
					this.OnInterviewDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Location", DbType="VarChar(256) NOT NULL", CanBeNull=false)]
		public string Location
		{
			get
			{
				return this._Location;
			}
			set
			{
				if ((this._Location != value))
				{
					this.OnLocationChanging(value);
					this.SendPropertyChanging();
					this._Location = value;
					this.SendPropertyChanged("Location");
					this.OnLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Videographer", DbType="VarChar(128) NOT NULL", CanBeNull=false)]
		public string Videographer
		{
			get
			{
				return this._Videographer;
			}
			set
			{
				if ((this._Videographer != value))
				{
					this.OnVideographerChanging(value);
					this.SendPropertyChanging();
					this._Videographer = value;
					this.SendPropertyChanged("Videographer");
					this.OnVideographerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sponsor", DbType="VarChar(64)")]
		public string Sponsor
		{
			get
			{
				return this._Sponsor;
			}
			set
			{
				if ((this._Sponsor != value))
				{
					this.OnSponsorChanging(value);
					this.SendPropertyChanging();
					this._Sponsor = value;
					this.SendPropertyChanged("Sponsor");
					this.OnSponsorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SponsorURL", DbType="VarChar(128)")]
		public string SponsorURL
		{
			get
			{
				return this._SponsorURL;
			}
			set
			{
				if ((this._SponsorURL != value))
				{
					this.OnSponsorURLChanging(value);
					this.SendPropertyChanging();
					this._SponsorURL = value;
					this.SendPropertyChanged("SponsorURL");
					this.OnSponsorURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SponsorImage", DbType="VarBinary(MAX)", CanBeNull=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary SponsorImage
		{
			get
			{
				return this._SponsorImage;
			}
			set
			{
				if ((this._SponsorImage != value))
				{
					this.OnSponsorImageChanging(value);
					this.SendPropertyChanging();
					this._SponsorImage = value;
					this.SendPropertyChanged("SponsorImage");
					this.OnSponsorImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageType", DbType="Char(3)")]
		public string ImageType
		{
			get
			{
				return this._ImageType;
			}
			set
			{
				if ((this._ImageType != value))
				{
					this.OnImageTypeChanging(value);
					this.SendPropertyChanging();
					this._ImageType = value;
					this.SendPropertyChanged("ImageType");
					this.OnImageTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime2")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Modified", DbType="DateTime2")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Published", DbType="DateTime2")]
		public System.Nullable<System.DateTime> Published
		{
			get
			{
				return this._Published;
			}
			set
			{
				if ((this._Published != value))
				{
					this.OnPublishedChanging(value);
					this.SendPropertyChanging();
					this._Published = value;
					this.SendPropertyChanged("Published");
					this.OnPublishedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phase", DbType="Char(1) NOT NULL")]
		public char Phase
		{
			get
			{
				return this._Phase;
			}
			set
			{
				if ((this._Phase != value))
				{
					this.OnPhaseChanging(value);
					this.SendPropertyChanging();
					this._Phase = value;
					this.SendPropertyChanged("Phase");
					this.OnPhaseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Session_Movie", Storage="_Movies", ThisKey="SessionID", OtherKey="SessionID")]
		public EntitySet<Movie> Movies
		{
			get
			{
				return this._Movies;
			}
			set
			{
				this._Movies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Session_Segment", Storage="_Segments", ThisKey="SessionID", OtherKey="SessionID")]
		public EntitySet<Segment> Segments
		{
			get
			{
				return this._Segments;
			}
			set
			{
				this._Segments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Collection_Session", Storage="_Collection", ThisKey="CollectionID", OtherKey="CollectionID", IsForeignKey=true)]
		public Collection Collection
		{
			get
			{
				return this._Collection.Entity;
			}
			set
			{
				Collection previousValue = this._Collection.Entity;
				if (((previousValue != value) 
							|| (this._Collection.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Collection.Entity = null;
						previousValue.Sessions.Remove(this);
					}
					this._Collection.Entity = value;
					if ((value != null))
					{
						value.Sessions.Add(this);
						this._CollectionID = value.CollectionID;
					}
					else
					{
						this._CollectionID = default(int);
					}
					this.SendPropertyChanged("Collection");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Movies(Movie entity)
		{
			this.SendPropertyChanging();
			entity.Session = this;
		}
		
		private void detach_Movies(Movie entity)
		{
			this.SendPropertyChanging();
			entity.Session = null;
		}
		
		private void attach_Segments(Segment entity)
		{
			this.SendPropertyChanging();
			entity.Session = this;
		}
		
		private void detach_Segments(Segment entity)
		{
			this.SendPropertyChanging();
			entity.Session = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="idvl.QueuedUpdates")]
	public partial class QueuedUpdate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Accession;
		
		private System.Nullable<System.DateTime> _Created;
		
		private EntityRef<Collection> _Collection;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccessionChanging(string value);
    partial void OnAccessionChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    #endregion
		
		public QueuedUpdate()
		{
			this._Collection = default(EntityRef<Collection>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Accession", DbType="VarChar(64) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Accession
		{
			get
			{
				return this._Accession;
			}
			set
			{
				if ((this._Accession != value))
				{
					if (this._Collection.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccessionChanging(value);
					this.SendPropertyChanging();
					this._Accession = value;
					this.SendPropertyChanged("Accession");
					this.OnAccessionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime2")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Collection_QueuedUpdate", Storage="_Collection", ThisKey="Accession", OtherKey="Accession", IsForeignKey=true)]
		public Collection Collection
		{
			get
			{
				return this._Collection.Entity;
			}
			set
			{
				Collection previousValue = this._Collection.Entity;
				if (((previousValue != value) 
							|| (this._Collection.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Collection.Entity = null;
						previousValue.QueuedUpdate = null;
					}
					this._Collection.Entity = value;
					if ((value != null))
					{
						value.QueuedUpdate = this;
						this._Accession = value.Accession;
					}
					else
					{
						this._Accession = default(string);
					}
					this.SendPropertyChanged("Collection");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="idvl.NamedEntities")]
	public partial class NamedEntity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SegmentID;
		
		private string _Type;
		
		private string _Value;
		
		private EntityRef<Segment> _Segment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSegmentIDChanging(int value);
    partial void OnSegmentIDChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public NamedEntity()
		{
			this._Segment = default(EntityRef<Segment>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SegmentID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SegmentID
		{
			get
			{
				return this._SegmentID;
			}
			set
			{
				if ((this._SegmentID != value))
				{
					if (this._Segment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSegmentIDChanging(value);
					this.SendPropertyChanging();
					this._SegmentID = value;
					this.SendPropertyChanged("SegmentID");
					this.OnSegmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="VarChar(32) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="VarChar(32) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Segment_NamedEntity", Storage="_Segment", ThisKey="SegmentID", OtherKey="SegmentID", IsForeignKey=true)]
		public Segment Segment
		{
			get
			{
				return this._Segment.Entity;
			}
			set
			{
				Segment previousValue = this._Segment.Entity;
				if (((previousValue != value) 
							|| (this._Segment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Segment.Entity = null;
						previousValue.NamedEntities.Remove(this);
					}
					this._Segment.Entity = value;
					if ((value != null))
					{
						value.NamedEntities.Add(this);
						this._SegmentID = value.SegmentID;
					}
					else
					{
						this._SegmentID = default(int);
					}
					this.SendPropertyChanged("Segment");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="idvl.TagImportStatus")]
	public partial class TagImportStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SegmentID;
		
		private System.Nullable<int> _FirebaseTimestamp;
		
		private System.Nullable<System.DateTime> _LastChecked;
		
		private string _LastStatus;
		
		private System.Nullable<System.DateTime> _LastUpdated;
		
		private EntityRef<Segment> _Segment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSegmentIDChanging(int value);
    partial void OnSegmentIDChanged();
    partial void OnFirebaseTimestampChanging(System.Nullable<int> value);
    partial void OnFirebaseTimestampChanged();
    partial void OnLastCheckedChanging(System.Nullable<System.DateTime> value);
    partial void OnLastCheckedChanged();
    partial void OnLastStatusChanging(string value);
    partial void OnLastStatusChanged();
    partial void OnLastUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnLastUpdatedChanged();
    #endregion
		
		public TagImportStatus()
		{
			this._Segment = default(EntityRef<Segment>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SegmentID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SegmentID
		{
			get
			{
				return this._SegmentID;
			}
			set
			{
				if ((this._SegmentID != value))
				{
					if (this._Segment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSegmentIDChanging(value);
					this.SendPropertyChanging();
					this._SegmentID = value;
					this.SendPropertyChanged("SegmentID");
					this.OnSegmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirebaseTimestamp", DbType="Int")]
		public System.Nullable<int> FirebaseTimestamp
		{
			get
			{
				return this._FirebaseTimestamp;
			}
			set
			{
				if ((this._FirebaseTimestamp != value))
				{
					this.OnFirebaseTimestampChanging(value);
					this.SendPropertyChanging();
					this._FirebaseTimestamp = value;
					this.SendPropertyChanged("FirebaseTimestamp");
					this.OnFirebaseTimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastChecked", DbType="DateTime2")]
		public System.Nullable<System.DateTime> LastChecked
		{
			get
			{
				return this._LastChecked;
			}
			set
			{
				if ((this._LastChecked != value))
				{
					this.OnLastCheckedChanging(value);
					this.SendPropertyChanging();
					this._LastChecked = value;
					this.SendPropertyChanged("LastChecked");
					this.OnLastCheckedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastStatus", DbType="NVarChar(32)")]
		public string LastStatus
		{
			get
			{
				return this._LastStatus;
			}
			set
			{
				if ((this._LastStatus != value))
				{
					this.OnLastStatusChanging(value);
					this.SendPropertyChanging();
					this._LastStatus = value;
					this.SendPropertyChanged("LastStatus");
					this.OnLastStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdated", DbType="DateTime2")]
		public System.Nullable<System.DateTime> LastUpdated
		{
			get
			{
				return this._LastUpdated;
			}
			set
			{
				if ((this._LastUpdated != value))
				{
					this.OnLastUpdatedChanging(value);
					this.SendPropertyChanging();
					this._LastUpdated = value;
					this.SendPropertyChanged("LastUpdated");
					this.OnLastUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Segment_TagImportStatus", Storage="_Segment", ThisKey="SegmentID", OtherKey="SegmentID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Segment Segment
		{
			get
			{
				return this._Segment.Entity;
			}
			set
			{
				Segment previousValue = this._Segment.Entity;
				if (((previousValue != value) 
							|| (this._Segment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Segment.Entity = null;
						previousValue.TagImportStatus = null;
					}
					this._Segment.Entity = value;
					if ((value != null))
					{
						value.TagImportStatus = this;
						this._SegmentID = value.SegmentID;
					}
					else
					{
						this._SegmentID = default(int);
					}
					this.SendPropertyChanged("Segment");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
