using System;
using System.IO;

using InformediaCORE.Common;
using InformediaCORE.Common.Database;
using InformediaCORE.Processing.Gentle.Models;
using InformediaCORE.Processing.Captions;

namespace InformediaCORE.Processing.Tasks
{
    class CaptioningTask : AbstractTask
    {
        private string _alignmentFile;

        /// <summary>
        /// The name of the input file required by this task.
        /// </summary>
        private string AlignmentFile
        {
            get
            {
                if (String.IsNullOrEmpty(_alignmentFile))
                {
                    _alignmentFile = Path.Combine(DataPath, $"{SegmentID}.alignment.json");
                }
                return _alignmentFile;
            }
        }

        private string _vttFile;
        
        /// <summary>
        /// The name of the output file generated by this task.
        /// </summary>
        private string VttFile        
        {
            get
            {
                // TODO: THIS PATH SHOULD BE DERIVED FROM STANDARD NOTATION
                if (String.IsNullOrEmpty(_vttFile))
                {
                    var basePath = Path.GetDirectoryName(Segment.MediaPath);
                    var baseName = Path.GetFileNameWithoutExtension(Segment.MediaPath);
                    _vttFile = Path.Combine(basePath, $"{baseName}.vtt");
                }
                return _vttFile;
            }
        }

        #region == Constructors
        /// <summary>
        /// Instantiates an instance of the CaptioningTask class from the given segment id.
        /// </summary>
        /// <param name="segmentID">A valid segment id.</param>
        /// <param name="condition">Specifies whether the task should be run regardless of previous run condition.</param>
        public CaptioningTask(int segmentID, RunConditionValue condition = RunConditionValue.AsNeeded) : base(segmentID, condition) { }

        /// <summary>
        /// Instantiates an instance of the CaptioningTask class from the given segment name.
        /// </summary>
        /// <param name="segmentName">A valid segment name.</param>
        /// <param name="condition">Specifies whether the task should be run regardless of previous run condition.</param>
        public CaptioningTask(string segmentName, RunConditionValue condition = RunConditionValue.AsNeeded) : base(segmentName, condition) { }

        /// <summary>
        /// Instantiates an instance of the CaptioningTask class from the given segment.
        /// </summary>
        /// <param name="segment">A valid segment.</param>
        /// <param name="condition">Specifies whether the task should be run regardless of previous run condition.</param>
        public CaptioningTask(Segment segment, RunConditionValue condition = RunConditionValue.AsNeeded) : base(segment, condition) { }
        #endregion Constructors

        #region == Internal Overrides
        /// <summary>
        /// Checks that the necessary input requirements are met prior to running the task.
        /// </summary>
        internal override void CheckRequirements()
        {
            if (!File.Exists(AlignmentFile))
                throw new TaskRequirementsException($"Could not find required input file {AlignmentFile}");

            if (Segment.TranscriptText == null)
                throw new TaskRequirementsException("Transcript is null.");

            if (Segment.TranscriptText == string.Empty)
                throw new TaskRequirementsException("Transcript is empty.");
        }

        /// <summary>
        /// Purges prior results for the associated segment.
        /// </summary>
        internal override void Purge()
        {
            if (File.Exists(VttFile) && RunCondition == RunConditionValue.Always)
            {
                Logger.Write("Deleting existing caption file {0}.", VttFile);
                File.Delete(VttFile);
            }

            Logger.Write("Deleting existing TSync data.");
            Segment.TranscriptSync = null;
            Database.UpdateSegment(Segment);

            // ============================================================
            // Reload the updated segment from the database
            Segment = Database.GetSegment(SegmentID);
        }

        internal override void Run()
        {
            var outputPath = Path.GetDirectoryName(VttFile);

            // ============================================================
            // Determine output directory and create it.
            if (!Directory.Exists(outputPath))
                Directory.CreateDirectory(outputPath);

            if (!Directory.Exists(outputPath))
                throw new TaskRunException($"Failed to create output directory: {outputPath}");

            // ============================================================
            // Retrieve from disk
            Logger.Write("Retrieving alignment data from {0}", AlignmentFile);
            var json = Utilities.ReadFromFile(AlignmentFile);
            var alignmentResult = Newtonsoft.Json.JsonConvert.DeserializeObject<AlignmentResult>(json);

            // ============================================================
            // Generate captions
            Logger.Write("Generating captions...");
            var captions = TextCaptioner.CaptionText(alignmentResult, Segment);
            var vtt = captions.ToVTT();
            Logger.Write("Writing caption file: {0}", VttFile);
            Utilities.WriteToFile(vtt, VttFile);

            // ============================================================
            // Write TSync to Database.
            Logger.Write("Writing TranscriptSync to database.");
            var tsync = captions.ToTSync(Segment.TranscriptLength ?? 0, Segment.Duration ?? 0);
            Segment.TranscriptSync = tsync.ToBinary();
            if (Database.UpdateSegment(Segment) == false)
                throw new TaskRunException("Failed to write TranscriptSync to database.");
        }
        #endregion Internal Overrides
    }
}
